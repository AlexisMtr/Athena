name: Athena Actions

on:
  pull_request:
    types: [opened, edited, synchronize]
    paths-ignore:
    - '.devcontainer/**'
    - '.github/CODEOWNERS'
    - 'deploy/**'
    - 'README.md'
    - 'docs/*'
    branches:
    - main
  push:
    paths-ignore:
    - '.devcontainer/**'
    - '.github/CODEOWNERS'
    - 'deploy/**'
    - 'README.md'
    - 'docs/*'
    branches:
    - main

jobs:
  code_quality:
    name: Code Quality
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"AlexisMtr_athena" /o:"alexismtr-github" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet publish Athena.sln
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  build:
    needs: code_quality
    name: Build .NET App
    runs-on: ubuntu-latest
    steps:
    - name: Check out the repo
      uses: actions/checkout@v2
    - name: Setup .NETCore 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x' # SDK Version to use; x will use the latest version of the 3.1 channel
    - name: Build Artifact
      run: |
        configuration=Release
        if [ ${{ github.action }} == 'pull_request'];
        then
          configuration=Debug
        fi
        dotnet publish Athena.csproj -c $configuration -o ./app/publish
    - name: Publish Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: athena-artifact
        path: ./app/publish

  docker_push:
    needs: code_quality
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
    - name: Check out the repo
      uses: actions/checkout@v2
    - name: Push to Docker Hub
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: alexismtr/athena
        tag_with_ref: true
        add_git_labels: true

  semantic_version:
    name: Compute next version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: paulhatch/semantic-version@v3
      id: semver
      name: Compute SemVer
      with:
        branch: "main"
        tag_prefix: "v"
        major_pattern: "BREAKING CHANGES"
        minor_pattern: "feature"
        format: "${major}.${minor}.${patch}"
    - name: Comment PR
      uses: thollander/actions-comment-pull-request@master
      with:
        message: "### üë∑üèª‚Äç‚ôÇÔ∏è Next Athena version will be **${{ steps.semver.outputs.version}}**\ndon't worry, Github Action will take care of all of this for you once this PR will be merged üßòüèª‚Äç‚ôÄÔ∏è"
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Update Version, tag and push
      if: github.event_name != 'pull_request'
      run: |
        sed -i 's/<Version>.*<\/Version>/<Version>${{ steps.semver.outputs.version }}<\/Version>/' Athena.csproj
        
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        git config user.name "${{ github.actor }}"

        git add Athena.csproj
        git commit -m "Bump Athena version to ${{ steps.semver.outputs.version }}"
        git tag v${{ steps.semver.outputs.version }} -a -m "Athena version ${{ steps.semver.outputs.version }}"

        git push --follow-tags
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}