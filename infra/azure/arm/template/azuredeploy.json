{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "releaseName": {
      "type": "string",
      "defaultValue": "athena"
    },
    "databaseConnectionString": {
      "type": "securestring",
      "metadata": {
        "description": "ConnectionString to the poseidon database. Put the secretUri if you want to use KeyVault"
      }
    },
    "eventSubscribeConnectionString": {
      "type": "securestring",
      "metadata": {
        "description": "ConnectionString to EventHub/Kafka broker to listen on. Put the secretUri if you want to use KeyVault"
      }
    },
    "eventSubscribeTopic": {
      "type": "string",
      "metadata": {
        "description": "EventHub/Kafka topic to listen on"
      }
    },
    "eventPublishConnectionString": {
      "type": "securestring",
      "metadata": {
        "description": "ConnectionString to EventHub/Kafka broker to publish on. Put the secretUri if you want to use KeyVault"
      }
    },
    "eventPublishTopic": {
      "type": "string",
      "metadata": {
        "description": "EventHub/Kafka topic to publish on"
      }
    },
    "appInsightsInstrumentationKey": {
      "type": "securestring",
      "metadata": {
        "description": "ApplicationInsigth Instrumentation Key. If not provided, the template will create a new AppInsights resource"
      }
    },
    "athenaPackageSource": {
      "type": "string",
      "metadata": {
        "description": "URI of the Athena Package available on Internet"
      }
    }
  },
  "functions": [
    {
      "namespace": "athena",
      "members": {
        "getConnectionString": {
          "parameters": [
            {
              "name": "connectionString",
              "type": "securestring"
            }
          ],
          "output": {
            "value": "[if(startsWith('http', parameters('connectionString')), concat('@Microsoft.KeyVault(SecretUri=', parameters('connectionString'), ')'), parameters('connectionString'))]",
            "type": "securestring"
          }
        }
      }
    }
  ],
  "variables": {
    "azStorageName": "[concat(parameters('releaseName'), 'sta')]",
    "azServicePlanName": "[concat(parameters('releaseName'), '-service-plan')]",
    "azFunctionName": "[concat(parameters('releaseName'), '-function')]",
    "azAppInsightName": "[concat(parameters('releaseName'), '-appinsights')]"
  },
  "resources": [
    {
      "comments": "StorageAccount for FunctionApp",
      "name": "[variables('azStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "tags": {
        "displayName": "[variables('azStorageName')]",
        "releaseName": "[parameters('releaseName')]"
      },
      "location": "[resourceGroup().location]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      }
    },
    {
      "name": "[variables('azServicePlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Y1"
      },
      "tags": {
        "displayName": "[variables('azServicePlanName')]",
        "releaseName": "[parameters('releaseName')]"
      },
      "properties": {
        "name": "[variables('azServicePlanName')]"
      }
    },
    {
      "name": "[variables('azFunctionName')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {
        "releaseName": "[parameters('releaseName')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('azServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('azStorageName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('azServicePlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('azStorageName'), ';AccountKey=', listKeys(variables('azStorageName'),'2019-06-01').keys[0].value)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('azStorageName'), ';AccountKey=', listKeys(variables('azStorageName'),'2019-06-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('azStorageName'), ';AccountKey=', listKeys(variables('azStorageName'),'2019-06-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('azFunctionName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[if(empty(parameters('appInsightsInstrumentationKey')), reference(resourceId('microsoft.insights/components/', variables('azAppInsightName')), '2015-05-01').InstrumentationKey, parameters('appInsightsInstrumentationKey'))]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "[parameters('athenaPackageSource')]"
            },
            {
              "name": "EventPublishConnectionString",
              "value": "[athena.getConnectionString(parameters('eventPublishConnectionString'))]"
            },
            {
              "name": "EventPublishTopic",
              "value": "[parameters('eventPublishTopic')]"
            },
            {
              "name": "EventSubscribeConnectionString",
              "value": "[athena.getConnectionString(parameters('eventSubscribeConnectionString'))]"
            },
            {
              "name": "EventSubscribeTopic",
              "value": "[parameters('eventSubscribeTopic')]"
            }
          ],
          "connectionStrings": [
            {
              "name": "DefaultConnection",
              "connectionString": "[athena.getConnectionString(parameters('databaseConnectionString'))]",
              "type": "SQLServer"
            }
          ]
        }
      }
    },
    {
      "condition": "[empty(parameters('appInsightsInstrumentationKey'))]",
      "name": "[variables('azAppInsightName')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2015-05-01",
      "location": "[resourceGroup().location]",
      "kind": "web",
      "tags": {
        "displayName": "[variables('azAppInsightName')]",
        "releaseName": "[parameters('releaseName')]"
      },
      "properties": {
        "Application_Type": "web",
        "SamplingPercentage": 100
      }
    }
  ],
  "outputs": {
    "functionPrincipalId": {
      "type": "securestring",
      "value": "[reference(concat('Microsoft.Web/sites/', variables('azFunctionName')), '2018-02-01', 'Full').identity.principalId]"
    },
    "appInsightInstrumentationKey": {
      "condition": "[empty(parameters('appInsightsInstrumentationKey'))]",
      "type": "securestring",
      "value": "[reference(resourceId('microsoft.insights/components/', variables('azAppInsightName')), '2015-05-01').InstrumentationKey]"
    }
  }
}